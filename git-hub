#!/usr/bin/env python
#
# Github integration for git.
# Usage: See README
#
# Copyright (C) 2012 Dennis Kaarsemaker <dennis@kaarsemaker.net>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

import getpass
import github3
import glob
import optparse
import os
import re
import sys
from whelk import shell

## ANSI color library from github.com/seveas/hacks
class Attr(object):
    def __init__(self, **attr):
        self.attr = attr
        self.rev_attr = dict([(v,k) for k,v in attr.items()])
        for k, v in attr.items():
            setattr(self, k, v)

    def name(self, val):
        return self.rev_attr[val]

fgcolor = Attr(black=30, red=31, green=32, yellow=33, blue=34, magenta=35, cyan=36, white=37, none=None)
bgcolor = Attr(black=40, red=41, green=42, yellow=43, blue=44, magenta=45, cyan=46, white=47, none=None)
attr    = Attr(normal=0, bright=1, faint=2, underline=4, negative=7, conceal=8, crossed=9, none=None)

esc = '\033'
mode = lambda *args: "%s[%sm" % (esc, ';'.join([str(x) for x in args if x is not None]))
reset = mode(attr.normal)
wrap = lambda text, *args: "%s%s%s" % (mode(*args), text, reset)

erase_line = esc + '[K'
erase_display = esc + '[2J'
save_cursor = esc + '[s'
restore_cursor = esc + '[u'
## End ansi color library

def main():
    p = optparse.OptionParser()
    p.add_option('-d', '--description', dest='description', default=None,
            help="Description for a new repo or gist")
    p.add_option('-p', '--parent', dest='parent', default=False, action='store_true',
            help="Show issues for the parent repo")
    p.usage = "git hub command [options] [arguments]\nAvailable commands:"
    for command in sorted(commands):
        doc = commands[command].__doc__
        if ']' in doc:
            p.usage += '\n- %s %s:%s' % (command, doc[:doc.find(']')+1], doc[doc.find(']')+1:])
        else:
            p.usage += '\n- %s: %s' % (command, doc)
    opts, args = p.parse_args()
    if not args or args[0] not in commands:
        p.error("No valid command specified")
    cmd = args.pop(0)
    try:
        commands[cmd](opts, args)
    except KeyboardInterrupt:
        sys.exit(1)

def err(msg):
    print >>sys.stderr, msg
    sys.exit(1)

def check(result):
    if result.returncode != 0:
        print result.stderr.rstrip()
        sys.exit(result.returncode)
    return result

commands = {}
def command(fnc):
    commands[fnc.__name__.replace('_','-')] = fnc
    return fnc

def github():
    config_file = os.path.join(os.path.expanduser('~'), '.githubconfig')
    old_umask = os.umask(0077)

    user = shell.git('config', '--file', config_file, 'github.user').stdout.strip()
    if not user:
        user = raw_input("Github user: ").strip()
        shell.git('config', '--file', config_file, 'github.user', user)

    token = shell.git('config', '--file', config_file, 'github.token').stdout.strip()
    if not token:
        password = getpass.getpass("GitHub password: ")
        auth = github3.authorize(user, password, ['user', 'repo', 'gist'],
                "Github Git integration", "http://seveas.github.com/git-hub")
        token = auth.token
        shell.git('config', '--file', config_file, 'github.token', token)
        shell.git('config', '--file', config_file, 'github.auth_id', str(auth.id))

    if not user or not token:
        err("No user or token specified")
    gh = github3.login(username=user, token=token)
    try:
        gh.user()
    except github3.GitHubError:
        # Token obsolete
        shell.git('config', '--file', config_file, '--unset', 'github.token')
        gh = github()
    os.umask(old_umask)
    return gh

def get_repo():
    gh = github()
    root = check(shell.git('rev-parse', '--show-toplevel')).stdout.strip()
    name = os.path.basename(root)
    return gh.repository(gh.user().login, name)

@command
def create(opts, args):
    """Create a repository on github to push to"""
    root = check(shell.git('rev-parse', '--show-toplevel')).stdout.strip()
    name = os.path.basename(root)
    gh = github()
    if name in [x.name for x in gh.list_repos()]:
        err("Repository already exists")
    gh.create_repo(name=name, description=opts.description or "")
    set_origin(opts, args)

@command
def set_origin(opts, args):
    """Set the remote 'origin' to github.\n  If this is a fork, set the remote 'upstream' to the parent"""
    repo = get_repo()
    shell.git('config', 'remote.origin.url', repo.ssh_url)
    shell.git('config', 'remote.origin.fetch', '+refs/heads/*:refs/remotes/origin/*')

    if repo.is_fork():
        parent = repo.parent
        shell.git('config', 'remote.upstream.url', parent.git_url)
        shell.git('config', 'remote.upstream.fetch', '+refs/heads/*:refs/remotes/upstream/*')

@command
def ls_repos(opts, args):
    """[user] List all repos of a user, by default yours"""
    gh = github()
    user = gh.user().login
    if args:
        user = args[0]
    for repo in gh.list_repos(user):
        print "%s - %s" % (repo.name, repo.description)

@command
def clone(opts, args):
    """[repo] Clone one of your repositories by name"""
    if not args:
        err("No repository specified")
    repo = args[0]
    gh = github()
    repo = gh.repository(gh.user().login, repo)
    rc = shell.git('clone', repo.ssh_url, redirect=False).returncode
    if rc:
        sys.exit(rc)
    if repo.is_fork():
        os.chdir(repo.name)
        set_origin(opts, args)
        shell.git('fetch', 'upstream', redirect=False)

@command
def fork(opts, args):
    """[url or user and repo] Fork a repo and clone it"""
    if not args:
        err("No repository specified")
    if len(args) == 2:
        user, repo = args
    else:
        # Assume a url. Split it by / and remove '.git'
        user, repo = args[0].rsplit('/', 3)[-2:]
        if repo.endswith('.git'):
            repo = repo[:-4]
    gh = github()
    if repo in [x.name for x in gh.list_repos()]:
        err("Repository already exists")
    repo = gh.repository(user, repo)
    clone = repo.create_fork()
    rc = shell.git('clone', clone.ssh_url, redirect=False).returncode
    if rc:
        sys.exit(rc)
    os.chdir(clone.name)
    set_origin(opts, args)
    shell.git('fetch', 'upstream', redirect=False)

@command
def forks(opts, args):
    """List all forks of this repository"""
    repo = get_repo()
    if repo.is_fork():
        repo = repo.parent
    print "[%s] %s" % (wrap(repo.owner.login, attr.bright), repo.html_url)
    for fork in repo.list_forks():
        print "[%s] %s" % (fork.owner.login, fork.html_url)

@command
def issues(opts, args):
    """[filters] List issues"""
    repo = get_repo()
    if repo.is_fork() and opts.parent:
        repo = repo.parent
    args = dict([x.split('=', 1) for x in args])
    for issue in repo.list_issues(**args):
        url = issue.pull_request and issue.pull_request['html_url'] or issue.html_url
        print "[%d] %s %s" % (issue.number, issue.title, url)

@command
def issue(opts, args):
    """[issue number ...] Issue details"""
    repo = get_repo()
    if repo.is_fork() and opts.parent:
        repo = repo.parent
    for arg in args:
        issue = repo.issue(arg)
        print wrap(issue.title, attr.bright, attr.underline)
        print issue.body_text
        print issue.pull_request and issue.pull_request['html_url'] or issue.html_url

@command
def add_remote(opts, args):
    """[user] Add user's fork as a remote by that name"""
    if not args:
        err("No user specified to fork from")
    repo = get_repo()
    if repo.is_fork():
        repo = repo.parent
    forks = repo.list_forks()
    for fork in forks:
        if fork.owner.login in args:
            check(shell.git('remote', 'add', fork.owner.login, fork.git_url))
            check(shell.git('fetch', fork.owner.login, stdout=False, stderr=False))

@command
def whois(opts, args):
    """[user ...] Display github user info"""
    gh = github()
    for user in args:
        user = gh.user(user)
        print wrap(user.name, attr.bright, attr.underline)
        print 'Profile   %s' % user.html_url
        if user.email:
            print 'Email     %s' % user.email
        if user.blog:
            print 'Blog      %s' % user.blog
        if user.location:
            print 'Location  %s' % user.location
        if user.company:
            print 'Company   %s' % user.company
        print 'Repos     %d public, %d private' % (user.public_repos, user.total_private_repos)
        print 'Gists     %d public, %d private' % (user.public_gists, user.total_private_gists)

@command
def whoami(opts, args):
    """Display github user info"""
    whois(opts, [github().user().login])
    for pkey in github().list_keys():
        algo, key = pkey.key.split()
        algo = algo[4:].upper()
        print "%s key%s...%s (%s)" % (algo, ' ' * (6 - len(algo)), key[-10:], pkey.title)

@command
def gist(opts, args):
    """[files] Create a new gist from files"""
    if not args:
        err("No files specified")
    files = {}
    description = opts.description or ''
    for f in args:
        if f == '-':
            files['stdout'] = {'content': sys.stdin.read()}
        else:
            if not os.path.exists(f):
                err("No such file: %s" % f)
            with open(f) as fd:
                files[os.path.basename(f)] = {'content': fd.read()}
    gist = github().create_gist(description=description, files=files)
    print "Gist created at %s" % gist.html_url

@command
def add_public_keys(opts, args):
    """[keys] Adds the keys to your public keys (defaults to all it can find)"""
    if not args:
        args = glob.glob(os.path.join(os.path.expanduser('~'), '.ssh', 'id_*.pub'))
    gh = github()
    existing = [x.key for x in gh.list_keys()]
    for arg in args:
        with open(arg) as fd:
            algo, key, title = fd.read().strip().split(None, 2)
        key = "%s %s" % (algo, key)
        if key in existing:
            continue
        print "Adding %s" % arg
        gh.create_key(title=title, key=key)

@command
def pull_request(opts, args):
    """[branch1:branch2] Opens a pull request to merge your branch1 to upstream branch2
  defaults are current branch and master"""
    repo = get_repo()
    if not repo.is_fork():
        err("This is not a forked repository")
    parent = repo.parent
    # Which branch?
    src = dst = None
    if args:
        src = args[0]
        if ':' in src:
            src, dst = src.split(':')
    else:
        src = check(shell.git('rev-parse', '--abbrev-ref', 'HEAD')).stdout.strip()
    if not dst:
        dst = 'master'
    # Try to get the local commit
    commit = check(shell.git('show-ref', 'refs/heads/%s' % src)).stdout.split()[0]
    # Do they exist on github?
    try:
        srcb = repo.branch(src)
        if srcb.commit.sha != commit:
            err("Branch %s not up to date on github (%s vs %s)" % (src, srcb.commit.sha[:7], commit[:7]))
    except github3.GitHubError:
        err("Branch %s does not exist in your github repo" % src)

    try:
        dstb = parent.branch(dst)
    except github3.GitHubError:
        err("Branch %s does not exist in %s/%s" % (dst, parent.owner.login, parent.name))

    # Do we have the dst locally?
    for remote in check(shell.git('remote')).stdout.strip().split("\n"):
        if check(shell.git('config', 'remote.%s.url' % remote)).stdout.strip() in [parent.git_url, parent.ssh_url, parent.clone_url]:
            break
    else:
        err("You don't have %s/%s configured as a remote repository" % (parent.owner.login, parent.name))

    # How many commits?
    commits = check(shell.git('log', '--pretty=%H', '%s/%s..%s' % (remote, dst, src))).stdout.strip().split()
    commits.reverse()
    # 1: title/body from commit
    if not commits:
        err("Your branch has no commits yet")
    if len(commits) == 1:
        title, body = check(shell.git('log', '--pretty=%s\n%b', '%s^..%s' % (commits[0], commits[0]))).stdout.split('\n', 1)
        title = title.strip()
        body = body.strip()

    # More: title from branchname (titlecased, s/-/ /g), body comments from shortlog
    else:
        title = src
        if '/' in title:
            title = title[title.rfind('/') + 1:]
        title = title.title().replace('-', ' ')
        body = ""

    body += """
# Please enter a message to accompany your pull request. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#"""
    body += "\n# " + check(shell.git('shortlog', '%s/%s..%s' % (remote, dst, src))).stdout.strip().replace('\n', '\n# ')
    body += "\n#\n# " + check(shell.git('diff', '--stat', '%s^..%s' % (commits[0], commits[-1]))).stdout.strip().replace('\n', '\n#')
    temp_file = os.path.join(check(shell.git('rev-parse', '--git-dir')).stdout.strip(), 'PULL_REQUEST_EDITMSG')
    with open(temp_file, 'w') as fd:
        fd.write("%s\n\n%s" % (title,body))
    getattr(shell, check(shell.git('var', 'GIT_EDITOR')).stdout.strip())(temp_file, redirect=False)
    with open(temp_file) as fd:
        title, body = (fd.read() +'\n').split('\n', 1)
    title = title.strip()
    body = body.strip()
    body = re.sub('^#.*', '', body, flags=re.MULTILINE).strip()
    if not body:
        err("No pull request message specified")

    pull = parent.create_pull(base=dst, head='%s:%s' % (repo.owner.login, src), title=title, body=body)
    print "Pull request %d created %s" % (pull.number, pull.html_url)

@command
def network(opts, args):
    """Create a graphviz graph of followers and forks"""
    from collections import defaultdict
    class P:
        def __init__(self, user):
            self.user = user
            self.done = False
            self.rel_to = defaultdict(list)

        def __repr__(self):
            return dict.__repr__(self.rel_to)

    level = 1
    if args:
        try:
            level = int(args[0])
        except ValueError:
            err("Integer argument required")
    gh = github()
    me = gh.user()
    people = {me.login: P(me)}
    for i in range(level):
        for login, person in list(people.items()):
            if person.done:
                continue

            print >>sys.stderr, "Looking at user %s" % login
            # Followers
            for other in person.user.iter_followers():
                if other.login not in people:
                    people[other.login] = P(other)
                people[other.login].rel_to[login].append('follows')
            for other in person.user.iter_following():
                if other.login not in people:
                    people[other.login] = P(other)
                person.rel_to[other.login].append('follows')

            # Forks
            for repo in gh.list_repos(login, type='owner'):
                print >>sys.stderr, "Looking at repo %s" % repo.name
                if repo.is_fork():
                    # Sigh. GH doesn't return parent info in list_repos
                    repo = gh.repository(repo.owner.login, repo.name)
                    if repo.owner.login not in people:
                        people[repo.owner.login] = P(repo.owner)
                    person.rel_to[repo.parent.owner.login].append('forked %s' % repo.parent.name)
                else:
                    for fork in repo.list_forks():
                        if fork.owner.login == login:
                            continue
                        if fork.owner.login not in people:
                            people[fork.owner.login] = P(fork.owner)
                        people[fork.owner.login].rel_to[login].append('forked %s' % repo.name)
            person.done = True

    # Now we create a graph
    graph = ["digraph network {"]
    for person in people:
        graph.append('    "%s"' % person)

    for login, person in people.items():
        for other, types in person.rel_to.items():
            graph.append('    "%s" -> "%s" [label="%s"]' % (login, other, "\\n".join(types)))

    graph.append("}")
    print "\n".join(graph)

main()
